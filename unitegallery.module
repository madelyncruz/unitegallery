<?php

/**
 * The minimum required version of the Unite Gallery plugin.
 */
define('UNITEGALLERY_MIN_PLUGIN_VERSION', '1.7.45');

/**
 * @file
 * Installation file for the Unite gallery module.
 */

function unitegallery_theme_registry_alter(&$theme_registry) {
  $theme_registry['field']['theme path'] = drupal_get_path('module', 'unitegallery');
  $theme_registry['field']['function'] = 'unitegallery_theme_field';
}

function unitegallery_theme_field(&$variables) {
  if (isset($variables['element']['#formatter']) && $variables['element']['#formatter'] == 'unitegallery') {
    $output = '';

    // Render the label, if it's not hidden.
    if (!$variables['label_hidden']) {
      $output .= '<div class="field-label"' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</div>';
    }

    // Render the items.
    foreach ($variables['items'] as $delta => $item) {
      $output .= drupal_render($item);
    }

    // Render the top-level DIV.
    $output = '<div id="unitegallery_' . $variables['element']['#object']->nid . '" class="unite-gallery"' . $variables['attributes'] . '>' . $output . '</div>';
  }

  else {
    $output = theme_field($variables);
  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function unitegallery_theme($existing, $type, $theme, $path) {
  $theme = array();

  $theme['unitegallery_imagefield'] =  array(
    'variables' => array(
      'image' => array(),
      'path' => NULL,
      'title' => NULL,
      'gid' => NULL,
      'base hook' => 'field',
    ),
    'file' => 'theme/unitegallery.theme.inc',
  );

  $theme['unitegallery_image_formatter'] = array(
    'variables' => array(
      'item' => NULL,
      'entity_type' => NULL,
      'entity' => NULL,
      'node' => NULL,  // Left for legacy support.
      'field' => array(),
      'display_settings' => array(),
      'delta' => NULL,
    ),
    'file' => 'theme/unitegallery.theme.inc',
  );

  return $theme;
}

/**
 * Implements hook_libraries_info().
 */
function unitegallery_libraries_info() {
  $libraries['unitegallery'] = array(
    'name' => 'Unite gallery plugin',
    'vendor url' => 'http://unitegallery.net/',
    'download url' => 'https://github.com/vvvmax/unitegallery/',
    /*'version arguments' => array(
      'file' => 'unitegallery.min.js',
      //'pattern' => '/unitegallery.js\s*([\d\.]+)/',
      //'pattern' => '@(?i:Version)\sv?([0-9\.a-z]+)@',
      //'pattern' => '/Version (\d+)/',
      'lines' => 100,
    ),*/
    'version callback' => 'unitegallery_version_callback',
    'files' => array(
      'css' => array(
        'dist/css/unite-gallery.css',
      ),
      'js' => array(
        'dist/js/unitegallery.min.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'dist/js/unitegallery.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'dist/js/unitegallery.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_formatter_info().
 */
function unitegallery_field_formatter_info() {
  return array(
    'unitegallery' => array(
      'label' => t('Unite Gallery'),
      'field types' => array('image'),
      'settings' => array(
        'unitegallery_style' => NULL,
        'unitegallery_type' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function unitegallery_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $image_styles = image_style_options(FALSE);

  $element['unitegallery_style'] = array(
    '#title' => t('Content image style'),
    '#type' => 'select',
    '#default_value' => $settings['unitegallery_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#description' => t('Image style to use in the content.'),
  );
  $element['unitegallery_type'] = array(
    '#title' => t('Gallery type'),
    '#type' => 'select',
    '#default_value' => $settings['unitegallery_type'],
    '#options' => _unitegallery_media_types(),
    '#description' => t('Choose gallery type.'),
    '#required' => TRUE,
  );

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function unitegallery_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['unitegallery_style']])) {
    $summary[] = t('Content image style: @style', array('@style' => $image_styles[$settings['unitegallery_style']]));
  }
  else {
    $summary[] = t('Content image style: Original image');
  }

  if (isset($settings['unitegallery_type'])) {
    $gallery_types = _unitegallery_media_types();
    $summary[] = t('Gallery type: @type', array('@type' => $gallery_types[$settings['unitegallery_type']]));
  }
  else {
    $summary[] = t('Gallery type: Should select.');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function unitegallery_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  $settings = $display['settings'];

  $settings += array(
    'id'      => $entity->nid,
    'config'  => unitegallery_js_config_default($settings['unitegallery_type'])
  );

  $library = '/sites/all/libraries/unitegallery/dist/';

  if (module_exists('libraries')) {
    libraries_load('unitegallery');
  }

  drupal_add_js(array('unitegallery' => $settings), array('type' => 'setting', 'scope' => JS_DEFAULT));
  drupal_add_css($library . 'themes/default/ug-theme-default.css');

  switch ($settings['unitegallery_type']) {
    case 'default':
      drupal_add_js($library . 'themes/default/ug-theme-default.js');
      break;

    case 'compact':
      drupal_add_js($library . 'themes/compact/ug-theme-compact.js');
      break;

    case 'tiles_columns':
      drupal_add_js($library . 'themes/tiles/ug-theme-tiles.js');
      break;

    case 'tilesgrid':
      drupal_add_js($library . 'themes/tilesgrid/ug-theme-tilesgrid.js');
      break;

    case 'grid':
      drupal_add_js($library . 'themes/grid/ug-theme-grid.js');
      break;

    case 'slider':
      drupal_add_js($library . 'themes/slider/ug-theme-slider.js');
      break;

    case 'video':
      drupal_add_js($library . 'themes/video/ug-theme-video.js');
      break;

    case 'carousel':
      drupal_add_js($library . 'themes/carousel/ug-theme-carousel.js');
      break;
  }

  $element['#attached']['js'] = array(drupal_get_path('module', 'unitegallery') .'/theme/unitegallery.js');

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'unitegallery_image_formatter',
      '#item' => $item,
      '#entity_type' => $entity_type,
      '#entity' => $entity,
      '#node' => $entity, // Left for legacy support.
      '#field' => $field,
      '#display_settings' => $display['settings'],
      '#delta' => $delta,
    );
  }

  return $element;
}

function unitegallery_version_callback() {
  //use some fancy magic to get the version number... or don't
  return TRUE;
}

function unitegallery_js_config_default($gallery_type) {
  $js_config = array();

  $js_config = array(
    'gallery_theme'       => $gallery_type,
    'gallery_width'       => '100%',
    'gallery_height'      => 500,
    'slider_control_zoom' => FALSE,
    'thumb_width'         => 122,
    'thumb_height'        => 80,
  );

  return $js_config;
}

function _unitegallery_media_types() {
  return array(
    'default'         => t('Default View'),
    'tiles_columns'   => t('Tiles - Columns'),
    'tiles_justified' => t('Tiles - Justified'),
    'tilesgrid'       => t('Tiles - Grid'),
    'compact'         => t('Compact Theme'),
    'grid'            => t('Grid Theme'),
    'slider'          => t('Slider'),
    'video'           => t('Video Gallery'),
    'carousel'        => t('Carousel'),
  );
}